# -*- coding: utf-8 -*-
"""gpt-dev.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKDjoqAKqP510QtW7g5pX8D0TmBEJxdp
"""
import torch
import torch.nn as nn
from torch.nn import functional as F

#Hyperparameters
batch_size = 32
block_size = 8
max_iters = 3000
eval_interval = 300
learning_rate = 1e-2
device = 'cuda' if torch.cuda.is_available() else 'cpu'
eval_iters = 200
torch.manual_seed(1337)
#Get the dataset. Trying tiny shakespeare dataset
#!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt

#read and inspect
with open('input.txt', 'r', encoding='utf-8') as f:
  text = f.read()

print("length of the characters is: ", len(text))

#let's look at the first 1000 characters
print(text[:1000])

#Take out all the unique characters: Data structure to be used is ofcourse set
chars = sorted(list(set(text))) #Sorted according to the respective ascii values
vocab_size = len(chars)
print(''.join(chars))
print(vocab_size)

#mapping of chars to integers
stoi = {ch:i for i,ch in enumerate(chars)}
itos = {i:ch for i,ch in enumerate(chars)}
print(stoi)
print(itos)

#Encoding: performs string to integer operation
encode = lambda s: [stoi[c] for c in s]

#Decoder: performs integer to string operation
decode = lambda l: ''.join(itos[i] for i in l)

#Print
print(encode("Hello World!"))
print(decode(encode("Hello World!")))

#Let's encode the whole dataset and store it in a torch.Tensor
import torch
data = torch.tensor(encode(text), dtype=torch.long)
print(data.shape, data.dtype)
print(data[:1000]) #11,15,394

#Split the dataset 90% train and 10% val set
n = int(0.9*len(data))
train_data = data[:n]
val_data = data[n:]

#How Language Models work basically:
block_size = 8
x = train_data[:block_size]
y = train_data[1:block_size+1]
for t in range(block_size):
  context = x[:t+1]
  target = y[t]
  print(f"When input is {context}, the output is {target}")

#Parallel data processing
torch.manual_seed(1337)
batch_size = 4 #how many independent sequences will we process in parallel?
block_size = 8 #what is the maximum context length for predictions?

def get_batch(split):
  #generate a small batch of data of inputs x and y
  data = train_data if split =="train" else val_data
  ix = torch.randint(len(data) - block_size, (batch_size,))
  x = torch.stack([data[i:i+block_size] for i in ix])
  y = torch.stack([data[i+1:i+block_size+1] for i in ix])
  x,y = x.to(device), y.to(device)
  return x,y

@torch.no_grad()
def estimate_loss():
  out = {}
  model.eval()
  for split in ['train', 'split']:
    losses = torch.zeros(eval_iters)
    for k in range(eval_iters):
      X, Y = get_batch(split)
      logits, loss = model(X,Y)
      losses[k] = loss.item()
    out[split] = losses.mean()
    return out

class BigramLanguageModel(nn.Module):
  def __init__(self, vocab_size) -> None:
    super().__init__()
    #each token directly reads off the logits for the next token from a lookup table
    self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)
  
  def forward(self, idx, targets=None):
    #idx and targets are both (Batch,Time) tensor of integers
    #logits = Prediction scores
    logits = self.token_embedding_table(idx) #(B,T,C)

    if targets is None:
      loss = None
    else:
      B,T,C = logits.shape
      logits = logits.view(B*T, C) #Reducing the dimension from 3 to 2 
      targets = targets.view(B*T)   
      #Loss function: -log likelihood
      loss = F.cross_entropy(logits, targets)
    return logits, loss

  #Generate the next sequence, (B,T) -> (B,T+1) -> (B,T+2)
  def generate(self, idx, max_new_tokens):
    #idx is (B,T) array of indices in the current context
    for _ in range(max_new_tokens):
      #get the predictions
      logits, loss = self(idx)
      #focus only on the last time step
      #Markov model 
      logits = logits[:,-1,:] #becomes (B,C)
      #apply softmax
      probs = F.softmax(logits, dim = -1) #(B,C)
      #sample from the probability distribution
      idx_next = torch.multinomial(probs, num_samples=1) #(B,1)
      #append the sampled index to the running sequence
      idx = torch.cat((idx, idx_next), dim = 1) #(B,T+1)
    return idx

#Create an instance of the model
model = BigramLanguageModel(vocab_size) #(Batch = 4, Time = 8, Channel = 65)
m = model.to(device)

#Training the model 
#Create a pytorch Adam optimizer
optimizer = torch.optim.AdamW(m.parameters(), lr = 1e-3)

batch_size = 32
for iter in range(max_iters):
  
  if iter%eval_interval==0:
    losses = estimate_loss()
    print(f"Step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")
  #sample the batch of data
  xb, yb = get_batch('train')

  #evaluate the loss
  logits, loss = m(xb, yb)
  #initialize the weights to zero
  optimizer.zero_grad(set_to_none=True)
  #backpropagate
  loss.backward()
  #call the step function
  optimizer.step()

print(loss.item())
context = torch.zeros((1,1), dtype=torch.long, device = device)
print(decode(m.generate(context, max_new_tokens=400)[0].tolist()))

